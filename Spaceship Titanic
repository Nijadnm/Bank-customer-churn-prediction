
**<h1>Code</h1><br />**	
import numpy as np <br />
import pandas as pd <br />
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import OrdinalEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
import xgboost as xgb
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns


X=pd.read_csv('../input/spaceship-titanic/train.csv')
file=X
X.drop(['Name','RoomService','FoodCourt','ShoppingMall','Spa','VRDeck'],axis=1,inplace=True)

# Getting only the deck by splitting the cabin
new=X['Cabin'].str.split('/',n=2,expand=True)
X['Deck']=new[0]
X['Side']=new[2]
X.drop(['Cabin'],axis=1,inplace=True)


# Getting the persons position in the group
pos=X['PassengerId'].str.split('_',n=1,expand=True)
X['pos']=pos[1]
X['group']=pos[0]
X.drop(['PassengerId',],axis=1,inplace=True)
X = X.astype({'pos':'int'})
X = X.astype({'group':'int'})

object_cols=[i for i in X.columns if X[i].dtype=='object' and X[i].nunique()<10]
for i in object_cols:
    X.dropna(axis=0,subset=[i],inplace=True)

X.dropna(axis=0,subset=['Transported'],inplace=True)
A=X
y=X.Transported
X.drop(['Transported'],axis=1,inplace=True)    
labelencoder=LabelEncoder()
y=labelencoder.fit_transform(y)

num_cols=[i for i in X.columns if X[i].dtype in ['int64','float64']]

xtrain,xvalid,ytrain,yvalid=train_test_split(X,y,train_size=0.7,test_size=0.3,random_state=0)
#print(xtrain.shape,'++',xtrain.isnull().sum())
num_transformer=SimpleImputer()
imputed_X_train=pd.DataFrame(num_transformer.fit_transform(xtrain[num_cols]))
imputed_X_valid=pd.DataFrame(num_transformer.transform(xvalid[num_cols]))
imputed_X_train.columns=xtrain[num_cols].columns
imputed_X_valid.columns=xvalid[num_cols].columns



#X=pd.concat([X.reset_index(drop=True),imputed_X.reset_index(drop=True)],axis=1)

OHE=OneHotEncoder(sparse=False)
OHE_xtrain=pd.DataFrame(OHE.fit_transform(xtrain[object_cols]))
OHE_xvalid=pd.DataFrame(OHE.transform(xvalid[object_cols]))

X_train=pd.concat([imputed_X_train,OHE_xtrain],axis=1)
X_valid=pd.concat([imputed_X_valid,OHE_xvalid],axis=1)

model=xgb.XGBClassifier(n_estimators=500,random_state=0)


model.fit(X_train,ytrain)
preds=model.predict(X_valid)
print(preds)

accuracy = accuracy_score(yvalid, preds)
print(accuracy)
